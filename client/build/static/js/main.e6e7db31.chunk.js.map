{"version":3,"sources":["message-box.js","App.js","serviceWorker.js","index.js"],"names":["MessageBox","socket","user","React","useState","text","who","msg","setMsg","console","log","messages","setMessages","typing","setTyping","useEffect","emit","id","on","res","s","className","name","map","m","i","style","display","key","type","value","onChange","event","target","onKeyPress","shiftKey","preventDefault","trim","io","App","setName","setUser","users","setUsers","suc","setSuc","pending","setPending","handleClick","success","your_user","us","placeItems","height","overflow","color","fontWeight","fontSize","u","e","padding","borderRadius","margin","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e6e7db31.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./message-box.css\";\n\nconst MessageBox = ({ socket, user }) => {\n  const [msg, setMsg] = React.useState({\n    text: \"\",\n    who: user,\n  });\n\n  console.log(user);\n  const [messages, setMessages] = React.useState([]);\n  const [typing, setTyping] = React.useState(\"\");\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setMsg((s) => ({ ...s, [name]: value }));\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\" && event.shiftKey) {\n      return;\n    }\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      if (!msg.text.trim()) {\n        return;\n      }\n      socket.emit(\"send-message\", msg);\n      setMsg((s) => ({ ...s, text: \"\" }));\n    }\n  };\n\n  React.useEffect(() => {\n    if (msg.text) {\n      socket.emit(\"typing\", { who: user.id });\n    } else {\n      socket.emit(\"typing\", { who: \"\" });\n    }\n  }, [msg.text, user.id, socket]);\n\n  React.useEffect(() => {\n    socket.on(\"typing-res\", (res) => {\n      setTyping(res.user);\n    });\n    socket.on(\"message-res\", (res) => {\n      setMessages((s) => [...s, res]);\n    });\n    socket.on(\"join-message\", ({ text, who }) => {\n      if (who.id !== user.id) setMessages((s) => [...s, { text, who }]);\n    });\n    socket.on(\"disconnect-message\", ({ text, who }) => {\n      if (who.id !== user.id) setMessages((s) => [...s, { text, who }]);\n    });\n  }, [socket, user, user.id]);\n\n  return (\n    <div className=\"box\">\n      <div className=\"topBar\">{`Hello, ${user.name}`}</div>\n      <div className=\"msg-box\">\n        <div className=\"list\">\n          {/* { show messages } */}\n          {messages.map((m, i) => (\n            <div style={{ display: \"flex\" }} key={i}>\n              {m.who.id === user.id ? (\n                <div className=\"right-msg\">\n                  <div className=\"me\">{m.who.name}</div>\n                  <div className=\"text\">{m.text}</div>\n                </div>\n              ) : (\n                <div className=\"left-msg\">\n                  <div className=\"text\">{m.text}</div>\n                  <div className=\"me\">{m.who.name}</div>\n                </div>\n              )}\n            </div>\n          ))}\n\n          {/* { Typing } */}\n          {typing && typing !== user.id && (\n            <div style={{ display: \"flex\" }}>\n              <div className=\"typing\">typing...</div>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"input-box\">\n        <input\n          type=\"text\"\n          name=\"text\"\n          value={msg.text}\n          onChange={handleChange}\n          onKeyPress={handleKeyPress}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default MessageBox;\n","import React from \"react\";\nimport MessageBox from \"./message-box\";\nimport io from \"socket.io-client\";\nimport \"./message-box.css\";\n\nconst socket = io(\"https://chat-with-react-socket-care.herokuapp.com/\");\n\nconst App = () => {\n  const [name, setName] = React.useState(\"\");\n  const [user, setUser] = React.useState(null);\n  const [users, setUsers] = React.useState(null);\n  const [suc, setSuc] = React.useState(null);\n  const [pending, setPending] = React.useState(false);\n\n  const handleClick = () => {\n    if (!name.trim()) {\n      return;\n    }\n    setPending(true);\n    socket.emit(\"request-join\", name);\n    setName(\"\");\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === \"Enter\" && event.shiftKey) {\n      return;\n    }\n    if (event.key === \"Enter\") {\n      event.preventDefault();\n      handleClick();\n      // if (!name.trim()) {\n      //   return;\n      // }\n      // socket.emit(\"request-join\", name);\n      // setName(\"\");\n    }\n  };\n\n  // React.useEffect(() => {\n  //   if (window.performance) {\n  //     if (performance.navigation.type == 1) {\n  //       if (user) {\n  //         socket.emit(\"delete-user\", user);\n  //       }\n  //     }\n  //   }\n  // }, []);\n\n  React.useEffect(() => {\n    socket.on(\"response-join\", ({ success, your_user }) => {\n      setSuc(success);\n      if (success === true) {\n        setUser(your_user);\n      }\n      setPending(false);\n    });\n    socket.on(\"get-users\", (us) => {\n      setUsers(us);\n    });\n\n    return () => {};\n  }, []);\n\n  return (\n    <div\n      style={{\n        display: \"grid\",\n        placeItems: \"center\",\n        height: \"100vh\",\n        overflow: \"hidden\",\n      }}\n    >\n      {pending ? (\n        <div style={{ color: \"#fff\", fontWeight: 600, fontSize: 18 }}>\n          Loading...\n        </div>\n      ) : user ? (\n        <div className=\"container\">\n          <div className=\"userBox\">\n            <ul>\n              {users.map((u) => (\n                <li key={u.id}>{u.name}</li>\n              ))}\n            </ul>\n          </div>{\" \"}\n          <MessageBox socket={socket} user={user} />\n        </div>\n      ) : (\n        <div>\n          <p style={{ color: \"#fff\" }}>Enter your name</p>\n          <input\n            type=\"text\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            onKeyPress={handleKeyPress}\n            style={{ height: 40, padding: 5, borderRadius: 3, fontWeight: 600 }}\n          />\n          {suc === false && (\n            <p style={{ color: \"red\", padding: 0, margin: \"auto\" }}>\n              The name is already taken!\n            </p>\n          )}\n          <button onClick={handleClick} className=\"btn\">\n            JOIN\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}